show databases;
use Ecommerce_cc;
show tables;
insert into customers(name,email,password) values
('John Doe','johndoe@example.com','123john@'),
('Jane Smith','janesmith@example.com','jane@smith'),
('Robert Johnson','robert@example.com','robert@567'),
('Sarah Brown','sarabrown@example.com','sarabrown#'),
('Laura Hall','laura@example.com','laura#934'),
('Emma Wilson','emmawilson@example.com','EmMaWiLsOn@563');
select * from customers;

insert into products(name,price,description,stockQuantity) values
('Laptop',800,'High-Performance laptop',10),
('Smartphone',600,'Latest smartphone',15),
('Refrigerator',700,'Energy efficient',20),
('TV',900,'4K Smart TV',5),
('Coffee Maker',50,'Automatic coffee maker',25);
select * from products;

insert into cart(cart_id,customer_id,product_id,quantity) values
(1,1,1,2),
(2,1,3,1),
(3,2,2,3),
(4,3,4,4),
(5,4,4,2),
(6,4,3,1),
(7,5,2,3),
(8,6,2,2);
select * from cart;

insert into orders(customer_id,order_date,total_price,shipping_address) values
(1,'2023-01-05',1200,'123 Main St,City'),
(2,'2023-02-10',900,'456 Elm St,Town'),
(3,'2023-03-15',300,'1789 Oak St, Village'),
(4,'2023-04-20',150,'101 Pine St,Suburb'),
(5,'2023-05-25',1800,'567 Birch St,State'),
(6,'2023-06-30',700,'765 Fir St,Territory');
select * from orders;

insert into order_item(order_item_id,order_id,product_id,quantity) values
(1,1,1,2),
(2,1,3,1),
(3,2,2,3),
(4,3,4,4),
(5,4,4,2),
(6,5,5,2);
select * from order_item;


-- Queries--

-- 1.Update refrigerator product price to 800
update products set price = 800 where name = 'Refrigerator';

-- 2.Remove all cart items for a specific customer
delete from cart where customer_id = 2;

-- 3.Retrieve products priced below 100
select * 
from products 
where price < 100;
/* 
 OUTPUT
	product_id	name	price	description	stockQuantity
	5	Coffee Maker	50	Automatic coffee maker	25
					
 */

-- 4. Find products with stockquantity greater than 5
select * 
from products 
where stockQuantity > 5;
/* 
 OUTPUT
product_id	name	price	description	stockQuantity
	1	Laptop	800	High-Performance laptop	10
	2	Smartphone	600	Latest smartphone	15
	3	Refrigerator	800	Energy efficient	20
	5	Coffee Maker	50	Automatic coffee maker	25
 */

-- 5.Retrieve orders with total amount between 500 and 1000
select *
from orders 
where total_price between 500 and 1000;
/* 
 OUTPUT
	order_id	order_date	total_price	shipping_address	customer_id
	2	         2023-02-10	   900	     456 Elm St,Town	      2
	6	         2023-06-30	   700	     765 Fir St,Territory	  6
 */

-- 6. Find products which name end with letter 'r'
select *
from products
where name like '%r';
/* 
 OUTPUT
 product_id	name	price	description	stockQuantity
	3	Refrigerator	800	Energy efficient	20
	5	Coffee Maker	50	Automatic coffee maker	25
 */

-- 7.Retrieve cart items for customer 5
-- projection - products
-- criteria - cart
select p.*,c.customer_id
from products p join cart c on p.product_id = c.product_id
where c.customer_id = 5;
/* 
 OUTPUT
 	product_id	name	price	description	stockQuantity
	2	Smartphone	600	Latest smartphone	15
 */

-- 8.Find customers who placed orders in 2023
-- projection - customers
-- criteria - orders
select *
from customers c join orders o on c.customer_id = o.customer_id
where year(o.order_date) = '2023';
/* 
 OUTPUT
 		customer_id	name	email	password	order_id	order_date	total_price	shipping_address	customer_id
	1	John Doe	    johndoe@example.com	123john@	1	2023-01-05	1200	123 Main St,City	1
	2	Jane Smith	janesmith@example.com	jane@smith	2	2023-02-10	900	456 Elm St,Town	2
	3	Robert Johnson	robert@example.com	robert@567	3	2023-03-15	300	1789 Oak St, Village	3
	4	Sarah Brown	sarabrown@example.com	sarabrown#	4	2023-04-20	150	101 Pine St,Suburb	4
	5	Laura Hall	laura@example.com	laura#934	5	2023-05-25	1800	567 Birch St,State	5
	6	Emma Wilson	emmawilson@example.com	EmMaWiLsOn@563	6	2023-06-30	700	765 Fir St,Territory	6
 */

-- 9.determine the minimum stock quantity for each product category   --->doubt
select *
from products
group by name
order by stockQuantity asc
limit 1;
/* 
 OUTPUT
 product_id	name	price	description	stockQuantity
	4	TV	900	4K Smart TV	5					
 */

-- 10.Calculate the total amount spent by each customer
-- orders
-- customer
select c.name , sum(o.total_price) as tot_amount
from customers c join orders o on c.customer_id = o.customer_id
group by c.name;
/* 
 OUTPUT
 	name	tot_amount
	Emma Wilson	700
	Jane Smith	900
	John Doe	1200
	Laura Hall	1800
	Robert Johnson	300
	Sarah Brown	150
 */

-- 11. Find the average order amount for each customer
-- orders
-- customers
select c.name , avg(o.total_price) as avg_amount
from customers c join orders o on c.customer_id = o.customer_id
group by c.name;
/* 
 OUTPUT
 	name	avg_amount
	Emma Wilson	700
	Jane Smith	900
	John Doe	1200
	Laura Hall	1800
	Robert Johnson	300
	Sarah Brown	150
 */
 
 -- 12. count the number of orders placed by each customer
 -- orders
 -- customers
 select c.name , count(o.order_id) as num_orders
from customers c join orders o on c.customer_id = o.customer_id
group by c.name;
/* 
 OUTPUT
 		name	num_orders
	Emma Wilson	1
	Jane Smith	1
	John Doe	1
	Laura Hall	1
	Robert Johnson	1
	Sarah Brown	1
 */
 
 -- 13. find the maximum order amount for each customer
select c.name , max(o.total_price) as max_amount
from customers c join orders o on c.customer_id = o.customer_id
group by c.name;
/* 
 OUTPUT
	 name	  max_amount
	Emma Wilson	700
	Jane Smith	900
	John Doe	1200
	Laura Hall	1800
	Robert Johnson	300
	Sarah Brown	150
 */
 
 -- 14. Get customers who placed orders totalling over 1000
select c.name , sum(o.total_price) as max_amount
from customers c join orders o on c.customer_id = o.customer_id
group by c.name
having sum(o.total_price) > 1000;
/* 
 OUTPUT
	 	name	max_amount
	John Doe	1200
	Laura Hall	1800
 */
 
 -- 15.Subquery to find products not in the cart
 -- projection - products
 -- cart
 select *
 from products p join cart c on p.product_id = c.product_id;
 
 select * 
 from products
 where product_id not in (select p.product_id
						from products p join cart c on p.product_id = c.product_id);
                        
/* 
 OUTPUT
 product_id	 name	   price	description	   stockQuantity
	5	  Coffee Maker	50	Automatic coffee maker	25
					
 */
 
 -- 16. Subquery to find customers who haven't placed orders
 -- projection - customers
 -- criteria - orders
 select *
 from customers c join orders o on c.customer_id = o.customer_id;
 
 select * 
 from customers 
 where customer_id not in (select o.customer_id
						  from customers c join orders o on c.customer_id = o.customer_id);
/* 
 OUTPUT
 	customer_id	name	email	password
		null	null	null       null					
 */
 
 -- 17.subquery to calculate the percentage of total revenue for a product 
 select p.name,sum(p.price) as tot_revenue,(sum(p.price)/(select sum(price) from products)*100) as percent_tot_revenue
 from products p join order_item oi on oi.product_id = p.product_id
 group by p.name;
 
 select p.name,sum(p.price) as tot_revenue,(sum(p.price)/(select sum(price) from products)*100) as percent_tot_revenue
 from products p join order_item oi on oi.product_id = p.product_id
 where p.name = 'TV';
 /* 
 OUTPUT
 		name	tot_revenue	percent_tot_revenue
	Coffee Maker	50	    1.58730158730159
	Laptop	        800	    25.3968253968254
	Refrigerator	800	    25.3968253968254
	Smartphone	    600	    19.047619047619
	TV	            1800	 57.1428571428571		
 */
 
 -- 18. Subquery to find products with low stock
 select *
 from products
 where stockQuantity in (select min(stockQuantity) from products);
 /* 
 OUTPUT
	product_id	name	price	description	stockQuantity
	4	TV	900	4K Smart TV	5
 */
 
 -- 19.Subquery to find customers who placed high value orders
 -- projection - customers
 -- criteria - orders
 select distinct c.*,o.total_price
 from customers c join orders o on c.customer_id = o.customer_id
where o.total_price in (select max(total_price) from orders);
/* 
 OUTPUT
	 customer_id	name	email	password	total_price
	  5	Laura Hall	laura@example.com	laura#934	1800
 */
